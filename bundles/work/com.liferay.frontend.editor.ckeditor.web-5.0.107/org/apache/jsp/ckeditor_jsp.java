/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-15 12:34:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.liferay.frontend.editor.ckeditor.web.internal.constants.CKEditorConstants;
import com.liferay.petra.string.StringBundler;
import com.liferay.petra.string.StringPool;
import com.liferay.portal.kernel.editor.configuration.EditorOptions;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.language.LanguageUtil;
import com.liferay.portal.kernel.servlet.PortalWebResourceConstants;
import com.liferay.portal.kernel.servlet.PortalWebResourcesUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.HashMapBuilder;
import com.liferay.portal.kernel.util.HtmlUtil;
import com.liferay.portal.kernel.util.JavaConstants;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.SessionClicks;
import com.liferay.portal.kernel.util.TextFormatter;
import com.liferay.portal.kernel.util.URLCodec;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.taglib.aui.AUIUtil;
import java.util.Map;
import javax.portlet.PortletRequest;
import javax.portlet.PortletResponse;

public final class ckeditor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


public String marshallParams(Map<String, String> params) {
	if (params == null) {
		return StringPool.BLANK;
	}

	StringBundler sb = new StringBundler(4 * params.size());

	for (Map.Entry<String, String> configParam : params.entrySet()) {
		sb.append(StringPool.AMPERSAND);
		sb.append(configParam.getKey());
		sb.append(StringPool.EQUAL);
		sb.append(URLCodec.encodeURL(configParam.getValue()));
	}

	return sb.toString();
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/init.jsp", Long.valueOf(1743464242000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(28);
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.HtmlUtil");
    _jspx_imports_classes.add("com.liferay.petra.string.StringPool");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.TextFormatter");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.PortalWebResourceConstants");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.URLCodec");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.PortalUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.SessionClicks");
    _jspx_imports_classes.add("javax.portlet.PortletResponse");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.Validator");
    _jspx_imports_classes.add("com.liferay.portal.kernel.editor.configuration.EditorOptions");
    _jspx_imports_classes.add("com.liferay.portal.kernel.json.JSONObject");
    _jspx_imports_classes.add("com.liferay.portal.kernel.language.LanguageUtil");
    _jspx_imports_classes.add("com.liferay.taglib.aui.AUIUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.JavaConstants");
    _jspx_imports_classes.add("com.liferay.frontend.editor.ckeditor.web.internal.constants.CKEditorConstants");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("javax.portlet.PortletRequest");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.HashMapBuilder");
    _jspx_imports_classes.add("com.liferay.portal.kernel.util.GetterUtil");
    _jspx_imports_classes.add("com.liferay.portal.kernel.servlet.PortalWebResourcesUtil");
    _jspx_imports_classes.add("com.liferay.petra.string.StringBundler");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      //  liferay-frontend:defineObjects
      com.liferay.frontend.taglib.servlet.taglib.DefineObjectsTag _jspx_th_liferay_002dfrontend_005fdefineObjects_005f0 = new com.liferay.frontend.taglib.servlet.taglib.DefineObjectsTag();
      _jsp_getInstanceManager().newInstance(_jspx_th_liferay_002dfrontend_005fdefineObjects_005f0);
      _jspx_th_liferay_002dfrontend_005fdefineObjects_005f0.setPageContext(_jspx_page_context);
      _jspx_th_liferay_002dfrontend_005fdefineObjects_005f0.setParent(null);
      int _jspx_eval_liferay_002dfrontend_005fdefineObjects_005f0 = _jspx_th_liferay_002dfrontend_005fdefineObjects_005f0.doStartTag();
      if (_jspx_th_liferay_002dfrontend_005fdefineObjects_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dfrontend_005fdefineObjects_005f0, _jsp_getInstanceManager());
      java.lang.String currentURL = null;
      javax.portlet.PortletURL currentURLObj = null;
      java.lang.String npmResolvedPackageName = null;
      java.util.ResourceBundle resourceBundle = null;
      javax.portlet.WindowState windowState = null;
      currentURL = (java.lang.String) _jspx_page_context.findAttribute("currentURL");
      currentURLObj = (javax.portlet.PortletURL) _jspx_page_context.findAttribute("currentURLObj");
      npmResolvedPackageName = (java.lang.String) _jspx_page_context.findAttribute("npmResolvedPackageName");
      resourceBundle = (java.util.ResourceBundle) _jspx_page_context.findAttribute("resourceBundle");
      windowState = (javax.portlet.WindowState) _jspx_page_context.findAttribute("windowState");
      out.write('\n');
      out.write('\n');
      //  liferay-theme:defineObjects
      com.liferay.taglib.theme.DefineObjectsTag _jspx_th_liferay_002dtheme_005fdefineObjects_005f0 = new com.liferay.taglib.theme.DefineObjectsTag();
      _jsp_getInstanceManager().newInstance(_jspx_th_liferay_002dtheme_005fdefineObjects_005f0);
      _jspx_th_liferay_002dtheme_005fdefineObjects_005f0.setPageContext(_jspx_page_context);
      _jspx_th_liferay_002dtheme_005fdefineObjects_005f0.setParent(null);
      int _jspx_eval_liferay_002dtheme_005fdefineObjects_005f0 = _jspx_th_liferay_002dtheme_005fdefineObjects_005f0.doStartTag();
      if (_jspx_th_liferay_002dtheme_005fdefineObjects_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dtheme_005fdefineObjects_005f0, _jsp_getInstanceManager());
      com.liferay.portal.kernel.theme.ThemeDisplay themeDisplay = null;
      com.liferay.portal.kernel.model.Company company = null;
      com.liferay.portal.kernel.model.User user = null;
      com.liferay.portal.kernel.model.User realUser = null;
      com.liferay.portal.kernel.model.Contact contact = null;
      com.liferay.portal.kernel.model.Layout layout = null;
      java.util.List layouts = null;
      java.lang.Long plid = null;
      com.liferay.portal.kernel.model.LayoutTypePortlet layoutTypePortlet = null;
      java.lang.Long scopeGroupId = null;
      com.liferay.portal.kernel.security.permission.PermissionChecker permissionChecker = null;
      java.util.Locale locale = null;
      java.util.TimeZone timeZone = null;
      com.liferay.portal.kernel.model.Theme theme = null;
      com.liferay.portal.kernel.model.ColorScheme colorScheme = null;
      com.liferay.portal.kernel.theme.PortletDisplay portletDisplay = null;
      java.lang.Long portletGroupId = null;
      themeDisplay = (com.liferay.portal.kernel.theme.ThemeDisplay) _jspx_page_context.findAttribute("themeDisplay");
      company = (com.liferay.portal.kernel.model.Company) _jspx_page_context.findAttribute("company");
      user = (com.liferay.portal.kernel.model.User) _jspx_page_context.findAttribute("user");
      realUser = (com.liferay.portal.kernel.model.User) _jspx_page_context.findAttribute("realUser");
      contact = (com.liferay.portal.kernel.model.Contact) _jspx_page_context.findAttribute("contact");
      layout = (com.liferay.portal.kernel.model.Layout) _jspx_page_context.findAttribute("layout");
      layouts = (java.util.List) _jspx_page_context.findAttribute("layouts");
      plid = (java.lang.Long) _jspx_page_context.findAttribute("plid");
      layoutTypePortlet = (com.liferay.portal.kernel.model.LayoutTypePortlet) _jspx_page_context.findAttribute("layoutTypePortlet");
      scopeGroupId = (java.lang.Long) _jspx_page_context.findAttribute("scopeGroupId");
      permissionChecker = (com.liferay.portal.kernel.security.permission.PermissionChecker) _jspx_page_context.findAttribute("permissionChecker");
      locale = (java.util.Locale) _jspx_page_context.findAttribute("locale");
      timeZone = (java.util.TimeZone) _jspx_page_context.findAttribute("timeZone");
      theme = (com.liferay.portal.kernel.model.Theme) _jspx_page_context.findAttribute("theme");
      colorScheme = (com.liferay.portal.kernel.model.ColorScheme) _jspx_page_context.findAttribute("colorScheme");
      portletDisplay = (com.liferay.portal.kernel.theme.PortletDisplay) _jspx_page_context.findAttribute("portletDisplay");
      portletGroupId = (java.lang.Long) _jspx_page_context.findAttribute("portletGroupId");
      out.write('\n');
      out.write('\n');

PortletRequest portletRequest = (PortletRequest)request.getAttribute(JavaConstants.JAVAX_PORTLET_REQUEST);

PortletResponse portletResponse = (PortletResponse)request.getAttribute(JavaConstants.JAVAX_PORTLET_RESPONSE);

String namespace = AUIUtil.getNamespace(portletRequest, portletResponse);

if (Validator.isNull(namespace)) {
	namespace = AUIUtil.getNamespace(request);
}

      out.write('\n');
      out.write('\n');

String portletId = portletDisplay.getId();

boolean autoCreate = GetterUtil.getBoolean((String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":autoCreate"));
String contents = (String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":contents");
String cssClass = GetterUtil.getString((String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":cssClass"));
Map<String, Object> data = (Map<String, Object>)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":data");
String editorName = (String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":editorName");
String initMethod = (String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":initMethod");
boolean inlineEdit = GetterUtil.getBoolean((String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":inlineEdit"));
String inlineEditSaveURL = GetterUtil.getString((String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":inlineEditSaveURL"));
String name = GetterUtil.getString((String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":name"));

String onBlurMethod = (String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":onBlurMethod");

if (Validator.isNotNull(onBlurMethod)) {
	onBlurMethod = namespace + onBlurMethod;
}

String onChangeMethod = (String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":onChangeMethod");

if (Validator.isNotNull(onChangeMethod)) {
	onChangeMethod = namespace + onChangeMethod;
}

String onFocusMethod = (String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":onFocusMethod");

if (Validator.isNotNull(onFocusMethod)) {
	onFocusMethod = namespace + onFocusMethod;
}

String onInitMethod = (String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":onInitMethod");

if (Validator.isNotNull(onInitMethod)) {
	onInitMethod = namespace + onInitMethod;
}

String placeholder = GetterUtil.getString((String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":placeholder"));
boolean required = GetterUtil.getBoolean((String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":required"));
boolean skipEditorLoading = GetterUtil.getBoolean((String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":skipEditorLoading"));
String toolbarSet = (String)request.getAttribute(CKEditorConstants.ATTRIBUTE_NAMESPACE + ":toolbarSet");

if (!inlineEdit) {
	name = namespace + name;
}

JSONObject editorConfigJSONObject = null;

if (data != null) {
	editorConfigJSONObject = (JSONObject)data.get("editorConfig");
}

EditorOptions editorOptions = null;

if (data != null) {
	editorOptions = (EditorOptions)data.get("editorOptions");
}

Map<String, Object> editorOptionsDynamicAttributes = null;

if (editorOptions != null) {
	editorOptionsDynamicAttributes = editorOptions.getDynamicAttributes();
}

      out.write('\n');
      out.write('\n');
      //  c:if
      org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
      _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /ckeditor.jsp(75,0) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest( !skipEditorLoading );
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write('\n');
          out.write('	');
          //  liferay-editor:resources
          com.liferay.frontend.editor.taglib.servlet.taglib.ResourcesTag _jspx_th_liferay_002deditor_005fresources_005f0 = new com.liferay.frontend.editor.taglib.servlet.taglib.ResourcesTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_liferay_002deditor_005fresources_005f0);
          _jspx_th_liferay_002deditor_005fresources_005f0.setPageContext(_jspx_page_context);
          _jspx_th_liferay_002deditor_005fresources_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f0);
          // /ckeditor.jsp(76,1) name = editorName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_liferay_002deditor_005fresources_005f0.setEditorName( editorName );
          // /ckeditor.jsp(76,1) name = inlineEdit type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_liferay_002deditor_005fresources_005f0.setInlineEdit( inlineEdit );
          // /ckeditor.jsp(76,1) name = inlineEditSaveURL type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_liferay_002deditor_005fresources_005f0.setInlineEditSaveURL( inlineEditSaveURL );
          int _jspx_eval_liferay_002deditor_005fresources_005f0 = _jspx_th_liferay_002deditor_005fresources_005f0.doStartTag();
          if (_jspx_th_liferay_002deditor_005fresources_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002deditor_005fresources_005f0, _jsp_getInstanceManager());
          out.write('\n');
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager());
      out.write('\n');
      out.write('\n');

String textareaName = HtmlUtil.escapeAttribute(name);

String modules = "aui-node-base";

if (inlineEdit && Validator.isNotNull(inlineEditSaveURL)) {
	textareaName = textareaName + "_original";

	modules += ",inline-editor-ckeditor";
}

      out.write('\n');
      out.write('\n');
      //  liferay-util:buffer
      com.liferay.taglib.util.BufferTag _jspx_th_liferay_002dutil_005fbuffer_005f0 = new com.liferay.taglib.util.BufferTag();
      _jsp_getInstanceManager().newInstance(_jspx_th_liferay_002dutil_005fbuffer_005f0);
      _jspx_th_liferay_002dutil_005fbuffer_005f0.setPageContext(_jspx_page_context);
      _jspx_th_liferay_002dutil_005fbuffer_005f0.setParent(null);
      // /ckeditor.jsp(95,0) name = var type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_liferay_002dutil_005fbuffer_005f0.setVar("editor");
      int _jspx_eval_liferay_002dutil_005fbuffer_005f0 = _jspx_th_liferay_002dutil_005fbuffer_005f0.doStartTag();
      if (_jspx_eval_liferay_002dutil_005fbuffer_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_liferay_002dutil_005fbuffer_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_liferay_002dutil_005fbuffer_005f0);
        }
        do {
          out.write('\n');
          out.write('	');
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f1);
          _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_liferay_002dutil_005fbuffer_005f0);
          // /ckeditor.jsp(98,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f1.setTest( Validator.isNotNull(placeholder) );
          int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
          if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("		<label class=\"control-label\" for=\"");
              out.print( HtmlUtil.escapeAttribute(name) );
              out.write("\">\n");
              out.write("			");
              //  liferay-ui:message
              com.liferay.taglib.ui.MessageTag _jspx_th_liferay_002dui_005fmessage_005f0 = new com.liferay.taglib.ui.MessageTag();
              _jsp_getInstanceManager().newInstance(_jspx_th_liferay_002dui_005fmessage_005f0);
              _jspx_th_liferay_002dui_005fmessage_005f0.setPageContext(_jspx_page_context);
              _jspx_th_liferay_002dui_005fmessage_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f1);
              // /ckeditor.jsp(100,3) name = key type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_liferay_002dui_005fmessage_005f0.setKey( placeholder );
              int _jspx_eval_liferay_002dui_005fmessage_005f0 = _jspx_th_liferay_002dui_005fmessage_005f0.doStartTag();
              if (_jspx_th_liferay_002dui_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dui_005fmessage_005f0, _jsp_getInstanceManager());
              out.write("\n");
              out.write("\n");
              out.write("			");
              //  c:if
              org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f2 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
              _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f2);
              _jspx_th_c_005fif_005f2.setPageContext(_jspx_page_context);
              _jspx_th_c_005fif_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f1);
              // /ckeditor.jsp(102,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_c_005fif_005f2.setTest( required );
              int _jspx_eval_c_005fif_005f2 = _jspx_th_c_005fif_005f2.doStartTag();
              if (_jspx_eval_c_005fif_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("				");
                  if (_jspx_meth_clay_005ficon_005f0(_jspx_th_c_005fif_005f2, _jspx_page_context))
                    return;
                  out.write("\n");
                  out.write("\n");
                  out.write("				<span class=\"hide-accessible sr-only\">");
                  if (_jspx_meth_liferay_002dui_005fmessage_005f1(_jspx_th_c_005fif_005f2, _jspx_page_context))
                    return;
                  out.write("</span>\n");
                  out.write("			");
                  int evalDoAfterBody = _jspx_th_c_005fif_005f2.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_c_005fif_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f2, _jsp_getInstanceManager());
              out.write("\n");
              out.write("		</label>\n");
              out.write("	");
              int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("	<textarea id=\"");
          out.print( textareaName );
          out.write("\" name=\"");
          out.print( textareaName );
          out.write("\" style=\"display: none;\"></textarea>\n");
          int evalDoAfterBody = _jspx_th_liferay_002dutil_005fbuffer_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_liferay_002dutil_005fbuffer_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_liferay_002dutil_005fbuffer_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dutil_005fbuffer_005f0, _jsp_getInstanceManager());
      java.lang.String editor = null;
      editor = (java.lang.String) _jspx_page_context.findAttribute("editor");
      out.write("\n");
      out.write("\n");
      out.write("<div class=\"");
      out.print( HtmlUtil.escapeAttribute(cssClass) );
      out.write("\" id=\"");
      out.print( HtmlUtil.escapeAttribute(name) );
      out.write("Container\">\n");
      out.write("	");
      //  c:if
      org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f3 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
      _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f3);
      _jspx_th_c_005fif_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f3.setParent(null);
      // /ckeditor.jsp(117,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f3.setTest( autoCreate );
      int _jspx_eval_c_005fif_005f3 = _jspx_th_c_005fif_005f3.doStartTag();
      if (_jspx_eval_c_005fif_005f3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write('\n');
          out.write('	');
          out.write('	');
          out.print( editor );
          out.write('\n');
          out.write('	');
          int evalDoAfterBody = _jspx_th_c_005fif_005f3.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f3, _jsp_getInstanceManager());
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      if (_jspx_meth_aui_005fscript_005f0(_jspx_page_context))
        return;
      out.write('\n');
      out.write('\n');

name = HtmlUtil.escapeJS(name);

      out.write('\n');
      out.write('\n');
      //  aui:script
      com.liferay.taglib.aui.ScriptTag _jspx_th_aui_005fscript_005f1 = new com.liferay.taglib.aui.ScriptTag();
      _jsp_getInstanceManager().newInstance(_jspx_th_aui_005fscript_005f1);
      _jspx_th_aui_005fscript_005f1.setPageContext(_jspx_page_context);
      _jspx_th_aui_005fscript_005f1.setParent(null);
      // /ckeditor.jsp(137,0) name = use type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_aui_005fscript_005f1.setUse( modules );
      int _jspx_eval_aui_005fscript_005f1 = _jspx_th_aui_005fscript_005f1.doStartTag();
      if (_jspx_eval_aui_005fscript_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_aui_005fscript_005f1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_aui_005fscript_005f1);
        }
        do {
          out.write("\n");
          out.write("	var UA = A.UA;\n");
          out.write("\n");
          out.write("	var windowNode = A.getWin();\n");
          out.write("\n");
          out.write("	var instanceDataReady = false;\n");
          out.write("	var instancePendingData = null;\n");
          out.write("\n");
          out.write("	var getInitialContent = function () {\n");
          out.write("		var data;\n");
          out.write("\n");
          out.write("		if (window['");
          out.print( HtmlUtil.escapeJS(namespace + initMethod) );
          out.write("']) {\n");
          out.write("			data = ");
          out.print( HtmlUtil.escapeJS(namespace + initMethod) );
          out.write("();\n");
          out.write("		}\n");
          out.write("		else {\n");
          out.write("			data =\n");
          out.write("				'");
          out.print( (contents != null) ? HtmlUtil.escapeJS(contents) : StringPool.BLANK );
          out.write("';\n");
          out.write("		}\n");
          out.write("\n");
          out.write("		return data;\n");
          out.write("	};\n");
          out.write("\n");
          out.write("	var onLocaleChangedHandler = function (event) {\n");
          out.write("		var contentsLanguage = event.item.getAttribute('data-value');\n");
          out.write("		var contentsLanguageDir = Liferay.Language.direction[contentsLanguage];\n");
          out.write("\n");
          out.write("		var nativeEditor = window['");
          out.print( name );
          out.write("'].getNativeEditor();\n");
          out.write("\n");
          out.write("		nativeEditor.config.contentsLanguage = contentsLanguage;\n");
          out.write("		nativeEditor.config.contentsLangDirection = contentsLanguageDir;\n");
          out.write("	};\n");
          out.write("\n");
          out.write("	var preventImageDragoverHandler = windowNode.on('dragover', (event) => {\n");
          out.write("		var validDropTarget = event.target.getDOMNode().isContentEditable;\n");
          out.write("\n");
          out.write("		if (!validDropTarget) {\n");
          out.write("			event.preventDefault();\n");
          out.write("		}\n");
          out.write("	});\n");
          out.write("\n");
          out.write("	var preventImageDropHandler = windowNode.on('drop', (event) => {\n");
          out.write("		var element = event.target.getDOMNode();\n");
          out.write("		var validDropTarget =\n");
          out.write("			element.isContentEditable || !!element.getAttribute('droppable');\n");
          out.write("\n");
          out.write("		var droppedFiles = event._event.dataTransfer.files || [];\n");
          out.write("\n");
          out.write("		if (!validDropTarget && droppedFiles.length > 0) {\n");
          out.write("			event.preventDefault();\n");
          out.write("			event.stopImmediatePropagation();\n");
          out.write("		}\n");
          out.write("	});\n");
          out.write("\n");
          out.write("	var eventHandles = [\n");
          out.write("		Liferay.on('inputLocalized:localeChanged', onLocaleChangedHandler),\n");
          out.write("		preventImageDragoverHandler,\n");
          out.write("		preventImageDropHandler,\n");
          out.write("	];\n");
          out.write("\n");
          out.write("	window['");
          out.print( name );
          out.write("'] = {\n");
          out.write("		create: function () {\n");
          out.write("			if (!window['");
          out.print( name );
          out.write("'].instanceReady) {\n");
          out.write("				createEditor();\n");
          out.write("			}\n");
          out.write("		},\n");
          out.write("\n");
          out.write("		destroy: function () {\n");
          out.write("			window['");
          out.print( name );
          out.write("'].dispose();\n");
          out.write("\n");
          out.write("			window['");
          out.print( name );
          out.write("'] = null;\n");
          out.write("\n");
          out.write("			Liferay.namespace('EDITORS').ckeditor.removeInstance();\n");
          out.write("		},\n");
          out.write("\n");
          out.write("		dispose: function () {\n");
          out.write("			var editor = CKEDITOR.instances['");
          out.print( name );
          out.write("'];\n");
          out.write("\n");
          out.write("			if (editor) {\n");
          out.write("				editor.destroy();\n");
          out.write("\n");
          out.write("				window['");
          out.print( name );
          out.write("'].instanceReady = false;\n");
          out.write("			}\n");
          out.write("\n");
          out.write("			new A.EventHandle(eventHandles).detach();\n");
          out.write("\n");
          out.write("			var editorEl = document.getElementById('");
          out.print( name );
          out.write("');\n");
          out.write("\n");
          out.write("			if (editorEl) {\n");
          out.write("				editorEl.parentNode.removeChild(editorEl);\n");
          out.write("			}\n");
          out.write("		},\n");
          out.write("\n");
          out.write("		focus: function () {\n");
          out.write("			CKEDITOR.instances['");
          out.print( name );
          out.write("'].focus();\n");
          out.write("		},\n");
          out.write("\n");
          out.write("		getCkData: function () {\n");
          out.write("			var data;\n");
          out.write("\n");
          out.write("			if (!window['");
          out.print( name );
          out.write("'].instanceReady) {\n");
          out.write("				data = getInitialContent();\n");
          out.write("			}\n");
          out.write("			else {\n");
          out.write("				data = CKEDITOR.instances['");
          out.print( name );
          out.write("'].getData();\n");
          out.write("\n");
          out.write("				if (CKEDITOR.env.gecko && CKEDITOR.tools.trim(data) == '<br />') {\n");
          out.write("					data = '';\n");
          out.write("				}\n");
          out.write("			}\n");
          out.write("\n");
          out.write("			return data;\n");
          out.write("		},\n");
          out.write("\n");
          out.write("		getHTML: function () {\n");
          out.write("			return window['");
          out.print( name );
          out.write("'].getCkData();\n");
          out.write("		},\n");
          out.write("\n");
          out.write("		getNativeEditor: function () {\n");
          out.write("			return CKEDITOR.instances['");
          out.print( name );
          out.write("'];\n");
          out.write("		},\n");
          out.write("\n");
          out.write("		getText: function () {\n");
          out.write("			var data;\n");
          out.write("\n");
          out.write("			if (!window['");
          out.print( name );
          out.write("'].instanceReady) {\n");
          out.write("				data = getInitialContent();\n");
          out.write("			}\n");
          out.write("			else {\n");
          out.write("				var editor = CKEDITOR.instances['");
          out.print( name );
          out.write("'];\n");
          out.write("\n");
          out.write("				data = editor.editable().getText();\n");
          out.write("			}\n");
          out.write("\n");
          out.write("			return data;\n");
          out.write("		},\n");
          out.write("\n");
          out.write("		instanceReady: false,\n");
          out.write("\n");
          out.write("		");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f4 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f4);
          _jspx_th_c_005fif_005f4.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f4.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(275,2) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f4.setTest( Validator.isNotNull(onBlurMethod) );
          int _jspx_eval_c_005fif_005f4 = _jspx_th_c_005fif_005f4.doStartTag();
          if (_jspx_eval_c_005fif_005f4 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("			onBlurCallback: function () {\n");
              out.write("				window['");
              out.print( HtmlUtil.escapeJS(onBlurMethod) );
              out.write("'](\n");
              out.write("					CKEDITOR.instances['");
              out.print( name );
              out.write("']\n");
              out.write("				);\n");
              out.write("			},\n");
              out.write("		");
              int evalDoAfterBody = _jspx_th_c_005fif_005f4.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f4, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("		");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f5 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f5);
          _jspx_th_c_005fif_005f5.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f5.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(283,2) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f5.setTest( Validator.isNotNull(onChangeMethod) );
          int _jspx_eval_c_005fif_005f5 = _jspx_th_c_005fif_005f5.doStartTag();
          if (_jspx_eval_c_005fif_005f5 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("			onChangeCallback: function () {\n");
              out.write("				var ckEditor = CKEDITOR.instances['");
              out.print( name );
              out.write("'];\n");
              out.write("				var dirty = ckEditor.checkDirty();\n");
              out.write("\n");
              out.write("				if (dirty) {\n");
              out.write("					window['");
              out.print( HtmlUtil.escapeJS(onChangeMethod) );
              out.write("'](\n");
              out.write("						window['");
              out.print( name );
              out.write("'].getHTML()\n");
              out.write("					);\n");
              out.write("\n");
              out.write("					ckEditor.resetDirty();\n");
              out.write("				}\n");
              out.write("			},\n");
              out.write("		");
              int evalDoAfterBody = _jspx_th_c_005fif_005f5.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f5, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("		");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f6 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f6);
          _jspx_th_c_005fif_005f6.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f6.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(298,2) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f6.setTest( Validator.isNotNull(onFocusMethod) );
          int _jspx_eval_c_005fif_005f6 = _jspx_th_c_005fif_005f6.doStartTag();
          if (_jspx_eval_c_005fif_005f6 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("			onFocusCallback: function () {\n");
              out.write("				window['");
              out.print( HtmlUtil.escapeJS(onFocusMethod) );
              out.write("'](\n");
              out.write("					CKEDITOR.instances['");
              out.print( name );
              out.write("']\n");
              out.write("				);\n");
              out.write("			},\n");
              out.write("		");
              int evalDoAfterBody = _jspx_th_c_005fif_005f6.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f6, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("		setHTML: function (value) {\n");
          out.write("			var ckEditorInstance = CKEDITOR.instances['");
          out.print( name );
          out.write("'];\n");
          out.write("\n");
          out.write("			var win = window['");
          out.print( name );
          out.write("'];\n");
          out.write("\n");
          out.write("			var setHTML = function (data) {\n");
          out.write("				if (instanceDataReady) {\n");
          out.write("					ckEditorInstance.setData(data);\n");
          out.write("				}\n");
          out.write("				else {\n");
          out.write("					instancePendingData = data;\n");
          out.write("				}\n");
          out.write("\n");
          out.write("				win._setStyles();\n");
          out.write("			};\n");
          out.write("\n");
          out.write("			if (win.instanceReady) {\n");
          out.write("				setHTML(value);\n");
          out.write("			}\n");
          out.write("			else {\n");
          out.write("				instancePendingData = value;\n");
          out.write("			}\n");
          out.write("		},\n");
          out.write("	};\n");
          out.write("\n");
          out.write("	var addAUIClass = function (iframe) {\n");
          out.write("		if (iframe) {\n");
          out.write("			var iframeWin = iframe.getDOM().contentWindow;\n");
          out.write("\n");
          out.write("			if (iframeWin) {\n");
          out.write("				var iframeDoc = iframeWin.document.documentElement;\n");
          out.write("\n");
          out.write("				A.one(iframeDoc).addClass('aui');\n");
          out.write("			}\n");
          out.write("		}\n");
          out.write("	};\n");
          out.write("\n");
          out.write("	window['");
          out.print( name );
          out.write("']._setStyles = function () {\n");
          out.write("		var ckEditor = A.one('#cke_");
          out.print( name );
          out.write("');\n");
          out.write("\n");
          out.write("		if (ckEditor) {\n");
          out.write("			var iframe = ckEditor.one('iframe');\n");
          out.write("\n");
          out.write("			if (iframe) {\n");
          out.write("				iframe.attr(\n");
          out.write("					'aria-labelledby',\n");
          out.write("					'");
          out.print( HtmlUtil.escapeAttribute(namespace) );
          out.write("Aria ' +\n");
          out.write("						iframe._node.attributes['aria-describedby'].value\n");
          out.write("				);\n");
          out.write("			}\n");
          out.write("\n");
          out.write("			addAUIClass(iframe);\n");
          out.write("\n");
          out.write("			var ckePanelDelegate = Liferay.Data['");
          out.print( name );
          out.write("Handle'];\n");
          out.write("\n");
          out.write("			if (!ckePanelDelegate) {\n");
          out.write("				ckePanelDelegate = ckEditor.delegate(\n");
          out.write("					'click',\n");
          out.write("					(event) => {\n");
          out.write("						var panelFrame = A.one('.cke_combopanel .cke_panel_frame');\n");
          out.write("\n");
          out.write("						addAUIClass(panelFrame);\n");
          out.write("\n");
          out.write("						ckePanelDelegate.detach();\n");
          out.write("\n");
          out.write("						Liferay.Data['");
          out.print( name );
          out.write("Handle'] = null;\n");
          out.write("					},\n");
          out.write("					'.cke_combo'\n");
          out.write("				);\n");
          out.write("\n");
          out.write("				Liferay.Data['");
          out.print( name );
          out.write("Handle'] = ckePanelDelegate;\n");
          out.write("			}\n");
          out.write("		}\n");
          out.write("	};\n");
          out.write("\n");
          out.write("	Liferay.fire('editorAPIReady', {\n");
          out.write("		editor: window['");
          out.print( name );
          out.write("'],\n");
          out.write("		editorName: '");
          out.print( name );
          out.write("',\n");
          out.write("	});\n");
          out.write("\n");
          out.write("	");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f7 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f7);
          _jspx_th_c_005fif_005f7.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f7.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(386,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f7.setTest( inlineEdit && Validator.isNotNull(inlineEditSaveURL) );
          int _jspx_eval_c_005fif_005f7 = _jspx_th_c_005fif_005f7.doStartTag();
          if (_jspx_eval_c_005fif_005f7 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("		var inlineEditor;\n");
              out.write("\n");
              out.write("		Liferay.on('toggleControls', (event) => {\n");
              out.write("			if (event.src === 'ui') {\n");
              out.write("				var ckEditor = CKEDITOR.instances['");
              out.print( name );
              out.write("'];\n");
              out.write("\n");
              out.write("				if (event.enabled && !ckEditor) {\n");
              out.write("					createEditor();\n");
              out.write("				}\n");
              out.write("				else if (ckEditor) {\n");
              out.write("					inlineEditor.destroy();\n");
              out.write("					ckEditor.destroy();\n");
              out.write("\n");
              out.write("					var editorNode = A.one('#");
              out.print( name );
              out.write("');\n");
              out.write("\n");
              out.write("					if (editorNode) {\n");
              out.write("						editorNode.removeAttribute('contenteditable');\n");
              out.write("						editorNode.removeClass('lfr-editable');\n");
              out.write("					}\n");
              out.write("				}\n");
              out.write("			}\n");
              out.write("		});\n");
              out.write("	");
              int evalDoAfterBody = _jspx_th_c_005fif_005f7.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f7.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f7, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("	var ckEditorContent;\n");
          out.write("	var currentToolbarSet;\n");
          out.write("\n");
          out.write("	var initialToolbarSet =\n");
          out.write("		'");
          out.print( TextFormatter.format(HtmlUtil.escapeJS(toolbarSet), TextFormatter.M) );
          out.write("';\n");
          out.write("\n");
          out.write("	function getToolbarSet(toolbarSet) {\n");
          out.write("		var Util = Liferay.Util;\n");
          out.write("\n");
          out.write("		if (Util.isPhone()) {\n");
          out.write("			toolbarSet = 'phone';\n");
          out.write("		}\n");
          out.write("		else if (Util.isTablet()) {\n");
          out.write("			toolbarSet = 'tablet';\n");
          out.write("		}\n");
          out.write("\n");
          out.write("		return toolbarSet;\n");
          out.write("	}\n");
          out.write("\n");
          out.write("	var afterVal = function () {\n");
          out.write("		return new A.Do.AlterReturn(\n");
          out.write("			'Return editor content',\n");
          out.write("			window['");
          out.print( name );
          out.write("'].getHTML()\n");
          out.write("		);\n");
          out.write("	};\n");
          out.write("\n");
          out.write("	var createEditor = function () {\n");
          out.write("		var editorContainer = A.one('#");
          out.print( name );
          out.write("Container');\n");
          out.write("		var editorNode = A.one('#");
          out.print( name );
          out.write("');\n");
          out.write("\n");
          out.write("		if (!editorNode) {\n");
          out.write("			editorContainer.setHTML('');\n");
          out.write("\n");
          out.write("			editorNode = A.Node.create('");
          out.print( HtmlUtil.escapeJS(editor) );
          out.write("');\n");
          out.write("\n");
          out.write("			editorContainer.appendChild(editorNode);\n");
          out.write("		}\n");
          out.write("\n");
          out.write("		if (editorNode) {\n");
          out.write("			editorNode.attr('contenteditable', true);\n");
          out.write("			editorNode.addClass('lfr-editable');\n");
          out.write("\n");
          out.write("			eventHandles.push(A.Do.after(afterVal, editorNode, 'val', this));\n");
          out.write("		}\n");
          out.write("\n");
          out.write("		function initData() {\n");
          out.write("			if (!ckEditorContent) {\n");
          out.write("				ckEditorContent = getInitialContent();\n");
          out.write("			}\n");
          out.write("\n");
          out.write("			var ckEditor = CKEDITOR.instances['");
          out.print( name );
          out.write("'];\n");
          out.write("\n");
          out.write("			ckEditor.setData(ckEditorContent, () => {\n");
          out.write("				ckEditor.resetDirty();\n");
          out.write("\n");
          out.write("				ckEditorContent = '';\n");
          out.write("			});\n");
          out.write("\n");
          out.write("			window['");
          out.print( name );
          out.write("']._setStyles();\n");
          out.write("\n");
          out.write("			");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f8 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f8);
          _jspx_th_c_005fif_005f8.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f8.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(471,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f8.setTest( Validator.isNotNull(onInitMethod) );
          int _jspx_eval_c_005fif_005f8 = _jspx_th_c_005fif_005f8.doStartTag();
          if (_jspx_eval_c_005fif_005f8 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("				window['");
              out.print( HtmlUtil.escapeJS(onInitMethod) );
              out.write("']();\n");
              out.write("			");
              int evalDoAfterBody = _jspx_th_c_005fif_005f8.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f8.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f8, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("			Liferay.component('");
          out.print( name );
          out.write("', window['");
          out.print( name );
          out.write("'], {\n");
          out.write("				portletId: '");
          out.print( portletId );
          out.write("',\n");
          out.write("			});\n");
          out.write("		}\n");
          out.write("\n");
          out.write("		function initEditor(config) {\n");
          out.write("			CKEDITOR.");
          out.print( inlineEdit ? "inline" : "replace" );
          out.write("(\n");
          out.write("				'");
          out.print( name );
          out.write("',\n");
          out.write("				config\n");
          out.write("			);\n");
          out.write("\n");
          out.write("			Liferay.on('");
          out.print( name );
          out.write("selectItem', (event) => {\n");
          out.write("				CKEDITOR.tools.callFunction(event.ckeditorfuncnum, event.value);\n");
          out.write("			});\n");
          out.write("\n");
          out.write("			var ckEditor = CKEDITOR.instances['");
          out.print( name );
          out.write("'];\n");
          out.write("\n");
          out.write("			");
          //  liferay-util:dynamic-include
          com.liferay.taglib.util.DynamicIncludeTag _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0 = new com.liferay.taglib.util.DynamicIncludeTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0);
          _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.setPageContext(_jspx_page_context);
          _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(492,3) name = key type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.setKey( "com.liferay.frontend.editor.ckeditor.web#" + editorName + "#onEditorCreate" );
          int _jspx_eval_liferay_002dutil_005fdynamic_002dinclude_005f0 = _jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.doStartTag();
          if (_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dutil_005fdynamic_002dinclude_005f0, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("			Liferay.namespace('EDITORS').ckeditor.addInstance();\n");
          out.write("\n");
          out.write("			");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f9 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f9);
          _jspx_th_c_005fif_005f9.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f9.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(496,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f9.setTest( inlineEdit && Validator.isNotNull(inlineEditSaveURL) );
          int _jspx_eval_c_005fif_005f9 = _jspx_th_c_005fif_005f9.doStartTag();
          if (_jspx_eval_c_005fif_005f9 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("				inlineEditor = new Liferay.CKEditorInline({\n");
              out.write("					editor: ckEditor,\n");
              out.write("					editorName: '");
              out.print( name );
              out.write("',\n");
              out.write("					namespace: '");
              if (_jspx_meth_portlet_005fnamespace_005f0(_jspx_th_c_005fif_005f9, _jspx_page_context))
                return;
              out.write("',\n");
              out.write("					saveURL: '");
              out.print( inlineEditSaveURL );
              out.write("',\n");
              out.write("				});\n");
              out.write("			");
              int evalDoAfterBody = _jspx_th_c_005fif_005f9.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f9.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f9, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("			var customDataProcessorLoaded = false;\n");
          out.write("\n");
          out.write("			");

			boolean useCustomDataProcessor = (editorOptionsDynamicAttributes != null) && GetterUtil.getBoolean(editorOptionsDynamicAttributes.get("useCustomDataProcessor"));
			
          out.write("\n");
          out.write("\n");
          out.write("			");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f10 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f10);
          _jspx_th_c_005fif_005f10.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f10.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(511,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f10.setTest( useCustomDataProcessor );
          int _jspx_eval_c_005fif_005f10 = _jspx_th_c_005fif_005f10.doStartTag();
          if (_jspx_eval_c_005fif_005f10 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("				ckEditor.on('customDataProcessorLoaded', () => {\n");
              out.write("					customDataProcessorLoaded = true;\n");
              out.write("\n");
              out.write("					if (instanceReady) {\n");
              out.write("						initData();\n");
              out.write("					}\n");
              out.write("\n");
              out.write("					// LPS-118801\n");
              out.write("\n");
              out.write("					var editorPath =\n");
              out.write("						'");
              out.print( HtmlUtil.escapeJS(PortalWebResourcesUtil.getContextPath(PortalWebResourceConstants.RESOURCE_TYPE_EDITOR_CKEDITOR)) );
              out.write("';\n");
              out.write("\n");
              out.write("					document\n");
              out.write("						.querySelectorAll(\n");
              out.write("							'link[href*=\"' +\n");
              out.write("								editorPath +\n");
              out.write("								'\"],script[src*=\"' +\n");
              out.write("								editorPath +\n");
              out.write("								'\"]'\n");
              out.write("						)\n");
              out.write("						.forEach((tag) => {\n");
              out.write("							tag.setAttribute('data-senna-track', 'temporary');\n");
              out.write("						});\n");
              out.write("				});\n");
              out.write("			");
              int evalDoAfterBody = _jspx_th_c_005fif_005f10.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f10.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f10, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("			var instanceReady = false;\n");
          out.write("\n");
          out.write("			ckEditor.on('instanceReady', () => {\n");
          out.write("				");
          //  c:choose
          org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = new org.apache.taglibs.standard.tag.common.core.ChooseTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fchoose_005f0);
          _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
          _jspx_th_c_005fchoose_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
          if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("					");
              //  c:when
              org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = new org.apache.taglibs.standard.tag.rt.core.WhenTag();
              _jsp_getInstanceManager().newInstance(_jspx_th_c_005fwhen_005f0);
              _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
              _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
              // /ckeditor.jsp(542,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_c_005fwhen_005f0.setTest( useCustomDataProcessor );
              int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
              if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("						instanceReady = true;\n");
                  out.write("\n");
                  out.write("						if (customDataProcessorLoaded) {\n");
                  out.write("							initData();\n");
                  out.write("						}\n");
                  out.write("					");
                  int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager());
              out.write("\n");
              out.write("					");
              if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
                return;
              out.write("\n");
              out.write("				");
              int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("				window['");
          out.print( name );
          out.write("'].instanceReady = true;\n");
          out.write("\n");
          out.write("				");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f11 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f11);
          _jspx_th_c_005fif_005f11.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f11.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(556,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f11.setTest( Validator.isNotNull(onBlurMethod) );
          int _jspx_eval_c_005fif_005f11 = _jspx_th_c_005fif_005f11.doStartTag();
          if (_jspx_eval_c_005fif_005f11 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("					CKEDITOR.instances['");
              out.print( name );
              out.write("'].on(\n");
              out.write("						'blur',\n");
              out.write("						window['");
              out.print( name );
              out.write("'].onBlurCallback\n");
              out.write("					);\n");
              out.write("				");
              int evalDoAfterBody = _jspx_th_c_005fif_005f11.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f11.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f11, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("				");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f12 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f12);
          _jspx_th_c_005fif_005f12.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f12.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(563,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f12.setTest( Validator.isNotNull(onChangeMethod) );
          int _jspx_eval_c_005fif_005f12 = _jspx_th_c_005fif_005f12.doStartTag();
          if (_jspx_eval_c_005fif_005f12 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("					var contentChangeHandle = setInterval(() => {\n");
              out.write("						try {\n");
              out.write("							window['");
              out.print( name );
              out.write("'].onChangeCallback();\n");
              out.write("						}\n");
              out.write("						catch (e) {}\n");
              out.write("					}, 300);\n");
              out.write("\n");
              out.write("					var clearContentChangeHandle = function (event) {\n");
              out.write("						if (event.portletId === '");
              out.print( portletId );
              out.write("') {\n");
              out.write("							clearInterval(contentChangeHandle);\n");
              out.write("\n");
              out.write("							Liferay.detach('destroyPortlet', clearContentChangeHandle);\n");
              out.write("						}\n");
              out.write("					};\n");
              out.write("\n");
              out.write("					Liferay.on('destroyPortlet', clearContentChangeHandle);\n");
              out.write("				");
              int evalDoAfterBody = _jspx_th_c_005fif_005f12.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f12.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f12, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("				");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f13 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f13);
          _jspx_th_c_005fif_005f13.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f13.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(582,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f13.setTest( Validator.isNotNull(onFocusMethod) );
          int _jspx_eval_c_005fif_005f13 = _jspx_th_c_005fif_005f13.doStartTag();
          if (_jspx_eval_c_005fif_005f13 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("					CKEDITOR.instances['");
              out.print( name );
              out.write("'].on(\n");
              out.write("						'focus',\n");
              out.write("						window['");
              out.print( name );
              out.write("'].onFocusCallback\n");
              out.write("					);\n");
              out.write("				");
              int evalDoAfterBody = _jspx_th_c_005fif_005f13.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f13.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f13, _jsp_getInstanceManager());
          out.write("\n");
          out.write("\n");
          out.write("				");
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f14 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f14);
          _jspx_th_c_005fif_005f14.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f14.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(589,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f14.setTest( !(inlineEdit && Validator.isNotNull(inlineEditSaveURL)) );
          int _jspx_eval_c_005fif_005f14 = _jspx_th_c_005fif_005f14.doStartTag();
          if (_jspx_eval_c_005fif_005f14 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("					var initialEditor = CKEDITOR.instances['");
              out.print( name );
              out.write("'].id;\n");
              out.write("\n");
              out.write("					eventHandles.push(\n");
              out.write("						A.getWin().on(\n");
              out.write("							'resize',\n");
              out.write("							A.debounce(() => {\n");
              out.write("								if (\n");
              out.write("									currentToolbarSet !=\n");
              out.write("									getToolbarSet(initialToolbarSet)\n");
              out.write("								) {\n");
              out.write("									var ckeditorInstance =\n");
              out.write("										CKEDITOR.instances['");
              out.print( name );
              out.write("'];\n");
              out.write("\n");
              out.write("									if (ckeditorInstance) {\n");
              out.write("										var currentEditor = ckeditorInstance.id;\n");
              out.write("\n");
              out.write("										if (currentEditor === initialEditor) {\n");
              out.write("											var currentDialog =\n");
              out.write("												CKEDITOR.dialog.getCurrent();\n");
              out.write("\n");
              out.write("											if (currentDialog) {\n");
              out.write("												currentDialog.hide();\n");
              out.write("											}\n");
              out.write("\n");
              out.write("											ckEditorContent =\n");
              out.write("												ckeditorInstance.getData();\n");
              out.write("\n");
              out.write("											window['");
              out.print( name );
              out.write("'].dispose();\n");
              out.write("\n");
              out.write("											window['");
              out.print( name );
              out.write("'].create();\n");
              out.write("\n");
              out.write("											CKEDITOR.instances['");
              out.print( name );
              out.write("'].setData(\n");
              out.write("												ckEditorContent\n");
              out.write("											);\n");
              out.write("\n");
              out.write("											initialEditor =\n");
              out.write("												CKEDITOR.instances['");
              out.print( name );
              out.write("'].id;\n");
              out.write("										}\n");
              out.write("									}\n");
              out.write("								}\n");
              out.write("							}, 250)\n");
              out.write("						)\n");
              out.write("					);\n");
              out.write("				");
              int evalDoAfterBody = _jspx_th_c_005fif_005f14.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f14.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f14, _jsp_getInstanceManager());
          out.write("\n");
          out.write("			});\n");
          out.write("\n");
          out.write("			ckEditor.on('dataReady', (event) => {\n");
          out.write("				if (instancePendingData !== null) {\n");
          out.write("					var pendingData = instancePendingData;\n");
          out.write("\n");
          out.write("					instancePendingData = null;\n");
          out.write("\n");
          out.write("					ckEditor.setData(pendingData);\n");
          out.write("				}\n");
          out.write("				else {\n");
          out.write("					instanceDataReady = true;\n");
          out.write("				}\n");
          out.write("\n");
          out.write("				window['");
          out.print( name );
          out.write("']._setStyles();\n");
          out.write("			});\n");
          out.write("\n");
          out.write("			ckEditor.on('drop', function (event) {\n");
          out.write("				var data = event.data.dataTransfer.getData('text/html');\n");
          out.write("\n");
          out.write("				if (data) {\n");
          out.write("					var fragment = CKEDITOR.htmlParser.fragment.fromHtml(data);\n");
          out.write("\n");
          out.write("					var element = fragment.children[0];\n");
          out.write("\n");
          out.write("					if (element.hasClass('cke_widget_image')) {\n");
          out.write("						element = element.children[0];\n");
          out.write("					}\n");
          out.write("\n");
          out.write("					if (this.pasteFilter && element.name) {\n");
          out.write("						return this.pasteFilter.check(element.name);\n");
          out.write("					}\n");
          out.write("				}\n");
          out.write("			});\n");
          out.write("\n");
          out.write("			ckEditor.on('setData', (event) => {\n");
          out.write("				instanceDataReady = false;\n");
          out.write("			});\n");
          out.write("\n");
          out.write("			if (UA.edge && parseInt(UA.edge, 10) >= 14) {\n");
          out.write("				var resetActiveElementValidation = function (activeElement) {\n");
          out.write("					activeElement = A.one(activeElement);\n");
          out.write("\n");
          out.write("					var activeElementAncestor = activeElement.ancestor();\n");
          out.write("\n");
          out.write("					if (\n");
          out.write("						activeElementAncestor.hasClass('has-error') ||\n");
          out.write("						activeElementAncestor.hasClass('has-success')\n");
          out.write("					) {\n");
          out.write("						activeElementAncestor.removeClass('has-error');\n");
          out.write("						activeElementAncestor.removeClass('has-success');\n");
          out.write("\n");
          out.write("						var formValidatorStack = activeElementAncestor.one(\n");
          out.write("							'.form-validator-stack'\n");
          out.write("						);\n");
          out.write("\n");
          out.write("						if (formValidatorStack) {\n");
          out.write("							formValidatorStack.remove();\n");
          out.write("						}\n");
          out.write("					}\n");
          out.write("				};\n");
          out.write("\n");
          out.write("				var onBlur = function (activeElement) {\n");
          out.write("					resetActiveElementValidation(activeElement);\n");
          out.write("\n");
          out.write("					setTimeout(() => {\n");
          out.write("						if (activeElement) {\n");
          out.write("							ckEditor.focusManager.blur(true);\n");
          out.write("							activeElement.focus();\n");
          out.write("						}\n");
          out.write("					}, 0);\n");
          out.write("				};\n");
          out.write("\n");
          out.write("				ckEditor.on('instanceReady', () => {\n");
          out.write("					var editorWrapper = A.one('#cke_");
          out.print( name );
          out.write("');\n");
          out.write("\n");
          out.write("					if (editorWrapper) {\n");
          out.write("						editorWrapper.once('mouseenter', function (event) {\n");
          out.write("							ckEditor.once(\n");
          out.write("								'focus',\n");
          out.write("								onBlur.bind(this, document.activeElement)\n");
          out.write("							);\n");
          out.write("							ckEditor.focus();\n");
          out.write("						});\n");
          out.write("					}\n");
          out.write("				});\n");
          out.write("			}\n");
          out.write("		}\n");
          out.write("\n");
          out.write("		currentToolbarSet = getToolbarSet(initialToolbarSet);\n");
          out.write("\n");
          out.write("		var defaultConfig = {\n");
          out.write("			filebrowserBrowseUrl: '',\n");
          out.write("			filebrowserFlashBrowseUrl: '',\n");
          out.write("			filebrowserImageBrowseLinkUrl: '',\n");
          out.write("			filebrowserImageBrowseUrl: '',\n");
          out.write("			filebrowserUploadUrl: null,\n");
          out.write("			toolbar: currentToolbarSet,\n");
          out.write("		};\n");
          out.write("\n");
          out.write("		var editorConfig =\n");
          out.write("			");
          out.print( Validator.isNotNull(editorConfigJSONObject) ? editorConfigJSONObject : "{}" );
          out.write(";\n");
          out.write("\n");
          out.write("		var config = A.merge(defaultConfig, editorConfig);\n");
          out.write("\n");
          out.write("		var editorTransformerURLs = config.editorTransformerURLs;\n");
          out.write("\n");
          out.write("		if (editorTransformerURLs) {\n");
          out.write("			var loadingIndicator = document.createElement('span');\n");
          out.write("\n");
          out.write("			loadingIndicator.classList.add('loading-animation');\n");
          out.write("			loadingIndicator.setAttribute('aria-hidden', true);\n");
          out.write("\n");
          out.write("			editorContainer.appendChild(loadingIndicator);\n");
          out.write("\n");
          out.write("			Liferay.Util.loadEditorClientExtensions({\n");
          out.write("				config: config,\n");
          out.write("				onLoad: ({transformedConfig}) => {\n");
          out.write("					if (loadingIndicator) {\n");
          out.write("						loadingIndicator.remove();\n");
          out.write("					}\n");
          out.write("\n");
          out.write("					initEditor(transformedConfig);\n");
          out.write("				},\n");
          out.write("			});\n");
          out.write("		}\n");
          out.write("		else {\n");
          out.write("			initEditor(config);\n");
          out.write("		}\n");
          out.write("	};\n");
          out.write("\n");
          out.write("	");

	String toogleControlsStatus = GetterUtil.getString(SessionClicks.get(request, "com.liferay.frontend.js.web_toggleControls", "visible"));
	
          out.write('\n');
          out.write('\n');
          out.write('	');
          //  c:if
          org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f15 = new org.apache.taglibs.standard.tag.rt.core.IfTag();
          _jsp_getInstanceManager().newInstance(_jspx_th_c_005fif_005f15);
          _jspx_th_c_005fif_005f15.setPageContext(_jspx_page_context);
          _jspx_th_c_005fif_005f15.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_aui_005fscript_005f1);
          // /ckeditor.jsp(769,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fif_005f15.setTest( autoCreate && ((inlineEdit && toogleControlsStatus.equals("visible")) || !inlineEdit) );
          int _jspx_eval_c_005fif_005f15 = _jspx_th_c_005fif_005f15.doStartTag();
          if (_jspx_eval_c_005fif_005f15 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("		createEditor();\n");
              out.write("	");
              int evalDoAfterBody = _jspx_th_c_005fif_005f15.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fif_005f15.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f15, _jsp_getInstanceManager());
          out.write('\n');
          int evalDoAfterBody = _jspx_th_aui_005fscript_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_aui_005fscript_005f1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_aui_005fscript_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_aui_005fscript_005f1, _jsp_getInstanceManager());
      out.write('\n');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_clay_005ficon_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f2, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  clay:icon
    com.liferay.frontend.taglib.clay.servlet.taglib.IconTag _jspx_th_clay_005ficon_005f0 = new com.liferay.frontend.taglib.clay.servlet.taglib.IconTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_clay_005ficon_005f0);
    _jspx_th_clay_005ficon_005f0.setPageContext(_jspx_page_context);
    _jspx_th_clay_005ficon_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f2);
    // /ckeditor.jsp(103,4) name = cssClass type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_clay_005ficon_005f0.setCssClass("reference-mark text-warning");
    // /ckeditor.jsp(103,4) name = symbol type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_clay_005ficon_005f0.setSymbol("asterisk");
    int _jspx_eval_clay_005ficon_005f0 = _jspx_th_clay_005ficon_005f0.doStartTag();
    if (_jspx_th_clay_005ficon_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_clay_005ficon_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_liferay_002dui_005fmessage_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f2, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  liferay-ui:message
    com.liferay.taglib.ui.MessageTag _jspx_th_liferay_002dui_005fmessage_005f1 = new com.liferay.taglib.ui.MessageTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_liferay_002dui_005fmessage_005f1);
    _jspx_th_liferay_002dui_005fmessage_005f1.setPageContext(_jspx_page_context);
    _jspx_th_liferay_002dui_005fmessage_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f2);
    // /ckeditor.jsp(108,42) name = key type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_liferay_002dui_005fmessage_005f1.setKey("required");
    int _jspx_eval_liferay_002dui_005fmessage_005f1 = _jspx_th_liferay_002dui_005fmessage_005f1.doStartTag();
    if (_jspx_th_liferay_002dui_005fmessage_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_002dui_005fmessage_005f1, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_aui_005fscript_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  aui:script
    com.liferay.taglib.aui.ScriptTag _jspx_th_aui_005fscript_005f0 = new com.liferay.taglib.aui.ScriptTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_aui_005fscript_005f0);
    _jspx_th_aui_005fscript_005f0.setPageContext(_jspx_page_context);
    _jspx_th_aui_005fscript_005f0.setParent(null);
    // /ckeditor.jsp(122,0) name = type type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_aui_005fscript_005f0.setType("text/javascript");
    int _jspx_eval_aui_005fscript_005f0 = _jspx_th_aui_005fscript_005f0.doStartTag();
    if (_jspx_eval_aui_005fscript_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      if (_jspx_eval_aui_005fscript_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
        out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_aui_005fscript_005f0);
      }
      do {
        out.write("\n");
        out.write("	CKEDITOR.ADDITIONAL_RESOURCE_PARAMS = {\n");
        out.write("		languageId: themeDisplay.getLanguageId(),\n");
        out.write("	};\n");
        out.write("\n");
        out.write("	CKEDITOR.disableAutoInline = true;\n");
        out.write("\n");
        out.write("	CKEDITOR.dtd.$removeEmpty.i = 0;\n");
        out.write("	CKEDITOR.dtd.$removeEmpty.span = 0;\n");
        int evalDoAfterBody = _jspx_th_aui_005fscript_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
      if (_jspx_eval_aui_005fscript_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
        out = _jspx_page_context.popBody();
      }
    }
    if (_jspx_th_aui_005fscript_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_aui_005fscript_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_portlet_005fnamespace_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fif_005f9, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:namespace
    com.liferay.taglib.portlet.NamespaceTag _jspx_th_portlet_005fnamespace_005f0 = new com.liferay.taglib.portlet.NamespaceTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_portlet_005fnamespace_005f0);
    _jspx_th_portlet_005fnamespace_005f0.setPageContext(_jspx_page_context);
    _jspx_th_portlet_005fnamespace_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fif_005f9);
    int _jspx_eval_portlet_005fnamespace_005f0 = _jspx_th_portlet_005fnamespace_005f0.doStartTag();
    if (_jspx_th_portlet_005fnamespace_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fnamespace_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = new org.apache.taglibs.standard.tag.common.core.OtherwiseTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_c_005fotherwise_005f0);
    _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("						initData();\n");
        out.write("					");
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager());
    return false;
  }
}
